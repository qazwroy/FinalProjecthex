package com.spring.service;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;

import javax.servlet.http.HttpSession;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.Model;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.spring.dao.MainInter;
import com.spring.dto.ProductDTO;
import com.spring.dto.ShopDTO;
@Service

public class MainService {

	private org.slf4j.Logger logger = LoggerFactory.getLogger(this.getClass());
	
	@Autowired SqlSession sqlSession;
	MainInter mainInter;
	

	HashMap<String,String> m_fileList = new HashMap<String,String>(); // 메인이미지
	HashMap<String,String> s_fileList = new HashMap<String,String>(); // 서브이미지
	
	ublic void getMainList(Model model) {
		logger.info("메인리스트 출력 실행");
		mainInter = sqlSession.getMapper(MainInter.class);	//sql 세션 연결
		model.addAttribute("product", mainInter.getMainList());//출력물 모델에 담기
	}
	
	//상점개설 여부 상태
	public HashMap<String, String> getMemShopState(String id, HttpSession session) {
		logger.info("맴버 상점개설 여부 상태값 반환");
		HashMap<String, String> map = new HashMap<String, String>(); // ajax로 값을 담아 보내줄 맵 생성
		mainInter = sqlSession.getMapper(MainInter.class); //sql 세션 연결
		String result = mainInter.getMemShopState(id); // 상점 개설 상태값 반환 (id :로그인시 아이디 세션값)
		logger.info("상점개설여부값 : {}", result);
		map.put("result", result); // 맵에 담기
		session.setAttribute("shopState", result); // 세션에 담기
		return map;
	}

	//상점개설 -> 상점명 입력값 넣기
	public HashMap<String, Object> setShopName(HashMap<String, Object> params) {
		logger.info("상점명 입력값 넣기");
		HashMap<String, Object> map = new HashMap<String, Object>();
		mainInter = sqlSession.getMapper(MainInter.class);
		String shopName = (String) params.get("shopName");
		String id = (String) params.get("id");
		int success = mainInter.setShopName(shopName,id);
		if(success > 0) {
			logger.info("success : {}", success);
			map.put("success", success);
		}
		return map;
	}
	
	//상점개설 -> 상점명 중복값 확인
	public HashMap<String, Object> shopOverlay(String shopName) {
		logger.info("상점명 중복값 확인");
		HashMap<String, Object> map = new HashMap<String, Object>();
		mainInter = sqlSession.getMapper(MainInter.class);
		String result = mainInter.shopOverlay(shopName);
	    boolean overlay = false;
	    logger.info("result" + result);
	    if (result != null) {
	       overlay = true;
	    }
	    map.put("overlay", overlay);
	    return map;
	}
	
	//상점개설 -> 상점개설 여부 상태값 수정
	public HashMap<String, Object> upShopState(String id) {
		logger.info("상점개설 여부 상태값 수정");
		HashMap<String, Object> map = new HashMap<String, Object>();
		mainInter = sqlSession.getMapper(MainInter.class);
		int success = mainInter.upShopState(id);
		if(success > 0) {
			logger.info("success : {}", success);
			map.put("success", success);
		}
		return map;
	}
	
	//개인 상점 정보 출력
	public HashMap<String, Object> getShopInfo(String id) {
		logger.info("개인 상점 정보 출력");
		HashMap<String, Object> map = new HashMap<String, Object>();
		mainInter = sqlSession.getMapper(MainInter.class);
		ShopDTO dto = mainInter.getShopInfo(id);
		if(dto != null) {
			logger.info(dto.getMem_id() + "/" + dto.getShop_name() + "/" + dto.getShop_date());
			map.put("dto", dto);
		}
		return map;
	}

	//상점인덱스 세션값 얻기
	public HashMap<String, Object> getShopIdx(String id, HttpSession session) {
		logger.info("상점Idx 세션값 얻기");
		HashMap<String, Object> map = new HashMap<String, Object>();
		mainInter = sqlSession.getMapper(MainInter.class);
		String result = mainInter.getShopIdx(id);
		if(result != null) {
			map.put("shopIdx", result);
			session.setAttribute("shopIdx", result);
		}
		return map;
	}

	//상품등록(이미지제외) 및 상품인덱스 값 추출
	   public HashMap<String, Integer> proInsert(HashMap<String, String> params) {
	      logger.info("이미지를 제외한 상품값 넣기");
	      HashMap<String, Integer> map = new HashMap<String,Integer>();
	      ProductDTO dto = new ProductDTO();
	      dto.setBrand_idx(Integer.parseInt(params.get("brand_idx")));
	      dto.setGender_idx(Integer.parseInt(params.get("gender_idx")));
	      dto.setShoes_idx(Integer.parseInt(params.get("shoes_idx")));
	      dto.setShop_idx(Integer.parseInt(params.get("shop_idx")));
	      dto.setPro_name(params.get("pro_name"));
	      dto.setPro_size(params.get("pro_size"));
	      dto.setPro_price(Integer.parseInt(params.get("pro_price")));
	      dto.setPro_memo(params.get("pro_memo"));
	      dto.setMem_id(params.get("mem_id"));
	      mainInter = sqlSession.getMapper(MainInter.class);
	      int success = mainInter.proInsert(dto);
	      if(success > 0) {
	         logger.info("상품삽입(이미지제외) 여부 : {}",success);
	         logger.info("pro_idx : {}", dto.getPro_idx());
	         map.put("success", success);
	         map.put("proIdx", dto.getPro_idx()); // useGeneratedKeys 를 이용한 pro_idx 값 추출
	      }
	      return map;
	   }

	   
	 //구매요청 게시판 이미지 
	public ModelAndView r_upload(MultipartFile file, String root) {
		ModelAndView mav = new ModelAndView();
		String fullPath = root+"resources/upload/";
		logger.info(fullPath);
		
		//1. 폴더가 없을 경우 폴더 생성
		File dir = new File(fullPath);
		if(!dir.exists()) {
			logger.info("폴더 없음, 생성 시작");
			dir.mkdir();
		}
		//2. 파일명 추출
		String fileName = file.getOriginalFilename();
		//3. 새로운 파일명 생성
		String newFileName = System.currentTimeMillis()
				+fileName.substring(fileName.lastIndexOf("."));	
		//4.파일 추출
		try {
			byte[] bytes = file.getBytes();//MultipartFile 에서 부터 바이트 추출
			Path filePath = Paths.get(fullPath+newFileName);//파일 생성 경로
			Files.write(filePath, bytes);//파일생성
			r_fileList.put(newFileName, fileName);
			logger.info("저장할 파일 갯수 : {}",r_fileList.size());
			mav.addObject("path", "resources/upload/"+newFileName);
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		mav.setViewName("RequestUploadFormPage");
 		
		
		
		return mav;
	}


}
