package com.spring.controller;

import java.util.HashMap;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.spring.service.BoardService;
import com.spring.service.MainService;
@Controller
public class MainController {
	
@Autowired MainService mainService;
@Autowired BoardService boardService;
	
	private static final Logger logger = LoggerFactory.getLogger(MainController.class);	

	//메인 리스트 출력
	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String home(Model model) {
		logger.info("홈 요청!");
		mainService.getMainList(model); // 메인창 들어갔을시 메인리스트(신상품) 뿌리기
		return "main";
	}
	
	//상점개설여부 상태 세션담기
	@RequestMapping(value="/getMemShopState")
	public @ResponseBody HashMap<String, String> 
		getMemShopState(@RequestParam("id") String id, HttpSession session){
		logger.info("멤버 상점개설 상태 가져오기");
		return mainService.getMemShopState(id, session);
	}
	
	//상점 개설 -> 상점명 입력값 넣기
	@RequestMapping(value = "/setShopName")
	public @ResponseBody HashMap<String, Object> setShopName(@RequestParam HashMap<String, Object> params){
		logger.info("상점명 입력값 넣기");
		return mainService.setShopName(params);
	}
	
	//상점 개설 -> 상점명 중복확인
	@RequestMapping(value = "/shopOverlay")
	public @ResponseBody HashMap<String, Object> shopOverlay(@RequestParam("shopName") String shopName){
		logger.info("상점명 중복확인");
		return mainService.shopOverlay(shopName);
	}
	
	//상점 개설 -> 상점생성 여부 상태값 변경
	@RequestMapping(value = "/upShopState")
	public @ResponseBody HashMap<String, Object> upShopState(@RequestParam("id") String id){
		logger.info("상점명 입력값 넣기");
		return mainService.upShopState(id);
	}
	
	//개인상점 정보 출력
	@RequestMapping(value = "/getShopInfo")
	public @ResponseBody HashMap<String, Object> getShopInfo(@RequestParam("id") String id){
		logger.info("개인상점 정보 출력");
		return mainService.getShopInfo(id);
	}
	
	//상점Idx 세션값 얻기
	@RequestMapping(value = "/getShopIdx")
	public @ResponseBody HashMap<String, Object> getShopIdx(@RequestParam("id") String id, HttpSession session){
		logger.info("상점 인덱스 값 얻기");
		return mainService.getShopIdx(id, session);
	}
	
	//상품등록 페이지 이동
	@RequestMapping(value="/regProduct")
	public String regProduct() {
		logger.info("상품등록 페이지 이동");
		return "regProduct";
	}
	
	//상품등록 (이미지 제외)
	   @RequestMapping(value = "/proInsert")
	   public @ResponseBody HashMap<String, Integer> proInsert(@RequestParam HashMap<String, String> params){
	      logger.info("상품등록 처리(이미지제외)");
	      return mainService.proInsert(params);
	   }
	
	
	
	@RequestMapping(value="/category")
	public String category(Model model) {
		return "category";
	}
	
	@RequestMapping(value="/speller")
	public String speller(Model model) {
		return "speller";
	}
	
	@RequestMapping(value="/mypage")
	public String mypage(Model model) {
		return "mypage";
	}

	
	@RequestMapping(value="/adminpage")
	public String adminpage(Model model) {
		return "adminpage";
	}
	
	@RequestMapping(value="/myproduct")
	public @ResponseBody HashMap<String, Object> myproduct(@RequestParam("id") String id) {
		logger.info("상품 목록 list 요청 ");	
		logger.info("id {}", id);
		return boardService.myproduct(id);
	}
	
	@RequestMapping(value="/prodel")
	public @ResponseBody HashMap<String, Integer> prodel(@RequestParam("prodel") String prodel) {
		logger.info("상품 삭제 불러오기");
		logger.info("삭제 {}", prodel);
		return boardService.prodel(prodel); 
	}
	
	@RequestMapping(value="/mybuy")
	public @ResponseBody HashMap<String, Object> mybuy(@RequestParam("id") String id) {
		logger.info("구매 내역 리스트 요청");
		logger.info("id {}", id);
		return boardService.mybuy(id);
	}

	@RequestMapping(value="/mycart")
	public @ResponseBody HashMap<String, Object> mycart(@RequestParam("id") String id) {
		logger.info("찜 목록 list 요청 ");	
		logger.info("id {}", id);
		return boardService.mycart(id);
	}
	
		
	@RequestMapping(value="/cartdel")
	public @ResponseBody HashMap<String, Integer> cardel(@RequestParam("cartdel") String cartdel) {
		logger.info("찜삭제 불러오기");
		logger.info("삭제 {}", cartdel);
		return boardService.cartdel(cartdel); 
	}

	@RequestMapping(value="/myproductCall")
	public String myproductCall() {
		return "myproduct";
	}

	@RequestMapping(value="/mybuyCall")
	public String mybuyCall() {
		return "mybuy";
	}

	@RequestMapping(value="/mycartCall")
	public String mycartCall() {
		return "mycart";
	}
	
	@RequestMapping(value="/myinfo")
	public String myinfo(Model model) {
		return "myinfo";
	}
	
	@RequestMapping(value="/prd_detailForm")
	public String prd_detailForm(Model model) {
		logger.info("상품상세보기");
		return "prd_detailForm";
	}
	
	@RequestMapping(value="/prd_detailcart")
	public String prd_detailsub() {
		logger.info("상품상세보기 팝업창");
		return "prd_detailsub";
	}
	
	//공지사항 게시판이동
	@RequestMapping(value="/NoticeList")
	public String NoticeList(Model model) {
		logger.info("공지사항 게시판 이동");
		return "NoticeList";
	}
	
	//구매요청 게시판이동
	@RequestMapping(value="/Request")
	public String Request(Model model) {
		logger.info("구매요청 게시판 이동");
		return "RequestList";
	}
	
	
	//구매요청 리스트
	@RequestMapping(value="/RequestList")
	public @ResponseBody HashMap<String, Object>RequestList(){
		logger.info("구매요청 리스트");
		return boardService.RequestList();
	}
	
		
	//구매요청 상세보기
	@RequestMapping(value="/RequestDetail")
	public ModelAndView RequestDetail(String req_idx) {
		logger.info("RequestDetail 서비스 요청");
		logger.info("상세보기 idx : {}",req_idx);
		return boardService.RequestDetail(req_idx);
	}
	
	//구매요청 수정상세보기
	@RequestMapping(value="/Request_updateForm")
	public ModelAndView Request_updateForm(String req_idx) {
		logger.info("Request_updateForm 서비스 요청");
		logger.info("상세보기 idx : {}",req_idx);
		return boardService.Request_updateForm(req_idx);
	}
	
	// 구매요청 작성하기 페이지 이동
		@RequestMapping(value = "/RequestWritePage")
		public String boardWritePage() {
			logger.info("RequestWritePage 요청");
			return "RequestWrite";
		}
	
	
	//구매요청 글쓰기
		@RequestMapping(value = "/RequestWrite")
		public @ResponseBody HashMap<String, Object> RequestWrite(@RequestParam HashMap<String, String> params) {
			logger.info("RequestWrite 요청");
			return boardService.RequestWrite(params);
		}
	
	// 구매요청 삭제하기
	@RequestMapping(value = "/Request_noticeDelete")
	public @ResponseBody HashMap<String, Object> boardDelete(@RequestParam("idx") int idx) {
		logger.info("Request_noticeDelete 요청");
		logger.info("idx : {}", idx);
		return boardService.Request_noticeDelete(idx);
	}
	//구매요청 수정하기
	@RequestMapping(value="/Request_update")
	public @ResponseBody HashMap<String, Object> Request_update(@RequestParam HashMap<String, String> params) {
		logger.info("RequestWrite 요청");
		return boardService.Request_update(params);
	}
	
	//구매요청 파일업로드 이동
	@RequestMapping(value="/RequestUploadFormPage")
	public String RequestUploadForm() {
		logger.info("RequestUploadFormPage 요청");
		return "RequestUploadFormPage";
	}
	
	//구매요청 이미지
	@RequestMapping(value="/RequestUpload")
	public ModelAndView r_upload(MultipartFile file, HttpSession session) {
		logger.info("RequestUpload 요청");
		String root = session.getServletContext().getRealPath("/");
		return mainService.r_upload(file,root);
	}
	
	
	
	
	
}
